global
        log /dev/log    local0
        log /dev/log    local1 notice
        tune.bufsize 128000
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        # An alternative list with additional directives can be obtained from
        #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
        ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
        ssl-default-bind-options no-sslv3

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        option  forwardfor
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

frontend muvr-frontend
        mode http
        bind *:80
        bind *:443 ssl crt /etc/ssl/private
        # Redirect if HTTPS is *not* used
        redirect scheme https code 301 if !{ ssl_fc }
        # New line to test URI to see if its a letsencrypt request
        acl letsencrypt-acl path_beg /.well-known/acme-challenge/
        use_backend letsencrypt-backend if letsencrypt-acl
        #MUVR stuffs
        acl is_websocket path_beg /socket.io
        acl is_websocket hdr(Upgrade) -i WebSocket
        acl is_websocket hdr_beg(Host) -i ws
        #prod
        acl muvrapp path_beg /app/
        use_backend secureapp-backend if muvrapp
        use_backend muvr-ws-backend if is_websocket
        default_backend muvr-http-backend

# LE Backend
backend letsencrypt-backend
        server letsencrypt 127.0.0.1:8888

backend muvr-http-backend
        mode http
        http-response set-header X-Powered-By "MUVR"
        #http-request cache-use cache_assets
        #http-response cache-store cache_assets
        server muvr-0 127.0.0.1:8080 check
        server muvr-1 127.0.0.1:8081 check
        server muvr-2 127.0.0.1:8082 check
        server muvr-3 127.0.0.1:8083 check

backend secureapp-backend
        mode http
        #Set Security Headers
        http-response set-header Content-Security-Policy "script-src 'self'"
        http-response add-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
        http-response set-header X-Powered-By "MUVR"
        http-response add-header Feature-Policy "camera 'none'; microphone 'none'; geolocation 'none'; payment 'none'"
        #http-request cache-use cache_assets
        #http-response cache-store cache_assets
        server muvr-0 127.0.0.1:8080 check
        server muvr-1 127.0.0.1:8081 check
        server muvr-2 127.0.0.1:8082 check
        server muvr-3 127.0.0.1:8083 check

backend muvr-ws-backend
        #Stick WebSocket connections to the same backend server to prevent unexpected hopping
        balance source
        option http-server-close
        option forceclose
        server muvr-0 127.0.0.1:8080 check
        server muvr-1 127.0.0.1:8081 check
        server muvr-2 127.0.0.1:8082 check
        server muvr-3 127.0.0.1:8083 check

cache cache_assets
        total-max-size 64
        max-age 2400
